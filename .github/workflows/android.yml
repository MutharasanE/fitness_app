name: Build Android APK
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# Add permissions for the workflow
permissions:
  contents: write
  packages: write
  actions: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Setup Java JDK
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      
    - name: Install dependencies
      run: npm ci
      
    - name: Install Expo CLI
      run: npm install -g @expo/cli
      
    - name: Install required Expo packages
      run: |
        npx expo install expo-build-properties
        npx expo install --fix
        
    - name: Create missing assets
      run: |
        npm install sharp
        mkdir -p assets
        
        node -e "
        const sharp = require('sharp');
        const fs = require('fs');
        
        async function createMissingAssets() {
          const assets = [
            { name: 'icon.png', width: 1024, height: 1024 },
            { name: 'adaptive-icon.png', width: 1024, height: 1024 },
            { name: 'splash.png', width: 1284, height: 2778 },
            { name: 'favicon.png', width: 48, height: 48 }
          ];
          
          for (const asset of assets) {
            if (!fs.existsSync(\`assets/\${asset.name}\`)) {
              console.log(\`Creating \${asset.name}\`);
              await sharp({
                create: {
                  width: asset.width,
                  height: asset.height,
                  channels: 4,
                  background: { r: 76, g: 175, b: 80, alpha: 1 }
                }
              }).png().toFile(\`assets/\${asset.name}\`);
            }
          }
          console.log('Assets check complete');
        }
        createMissingAssets().catch(console.error);
        "

    - name: Generate Android project
      run: |
        npx expo prebuild --platform android --clean

    - name: Build Release APK (Standalone)
      run: |
        cd android
        chmod +x gradlew
        
        # Build RELEASE APK instead of debug - this creates a standalone app
        ./gradlew assembleRelease
        
        # Verify APK was created
        ls -la app/build/outputs/apk/release/

    - name: Sign APK for installation
      run: |
        cd android/app/build/outputs/apk/release
        
        # Create a keystore for signing
        keytool -genkey -v -keystore release.keystore -storepass android -alias androiddebugkey -keypass android -keyalg RSA -keysize 2048 -validity 10000 -dname "CN=FitnessApp"
        
        # Find the correct apksigner path
        APKSIGNER=$(find $ANDROID_HOME/build-tools -name "apksigner" | head -1)
        echo "Using apksigner: $APKSIGNER"
        
        # Sign the APK with correct syntax
        java -jar $ANDROID_HOME/build-tools/*/lib/apksigner.jar sign \
          --ks release.keystore \
          --ks-key-alias androiddebugkey \
          --ks-pass pass:android \
          --key-pass pass:android \
          --out app-release-signed.apk \
          app-release-unsigned.apk
        
        # Alternative method using jarsigner if apksigner fails
        if [ ! -f "app-release-signed.apk" ]; then
          echo "Using jarsigner as fallback"
          cp app-release-unsigned.apk app-release-signed.apk
          jarsigner -verbose -sigalg SHA256withRSA -digestalg SHA-256 -keystore release.keystore -storepass android app-release-signed.apk androiddebugkey
          
          # Align the APK
          $ANDROID_HOME/build-tools/*/zipalign -v 4 app-release-signed.apk app-release-aligned.apk
          mv app-release-aligned.apk app-release-signed.apk
        fi
        
        # Verify the APK exists
        ls -la app-release-signed.apk

    - name: Upload Signed APK Artifact
      uses: actions/upload-artifact@v4
      with:
        name: fitness-tracker-standalone-v${{ github.run_number }}
        path: android/app/build/outputs/apk/release/app-release-signed.apk

    - name: Create GitHub Release
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ github.run_number }}
        name: Fitness Tracker v${{ github.run_number }}
        body: |
          ## üèãÔ∏è Fitness Tracker - Standalone Mobile App
          
          **‚úÖ STANDALONE APK - No development server needed!**
          
          ### Features:
          - üìä User profile tracking (weight, height, age, activity level)
          - üçé Calorie and meal logging
          - üí™ Workout session recording with sets, reps, and weights
          - üìã Exercise library with custom exercises
          - üìÖ Weekly workout planning
          
          ### Installation:
          1. Download `app-release-signed.apk` below
          2. On your Android phone: Settings ‚Üí Security ‚Üí Enable "Install from unknown sources"
          3. Open the APK file and install
          4. Launch "Fitness Tracker" from your app drawer
          
          **‚úÖ Works completely offline - no server required!**
          **‚úÖ All data stored locally on your device**
          **‚úÖ No Metro bundler or development server needed**
          
          ### Technical Notes:
          - This is a **release build** with bundled JavaScript
          - App runs independently without any external dependencies
          - All React Native code is compiled into the APK
        files: android/app/build/outputs/apk/release/app-release-signed.apk
        draft: false
        prerelease: false
        make_latest: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
